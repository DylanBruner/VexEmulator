{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nbumper_a = Bumper(brain.three_wire_port.a)\nbumper_b = Bumper(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ----------------------------------------------------------------------------\n#                                                                            \n#    Project:        Complex Decisions (AND OR NOT)\n#    Description:    This example will use logical operators to create \n#                    complex decisions based on multiple sensor inputs\n#    Configuration:  V5 Speedbot (Drivetrain 2-motor, No Gyro)\n#                    Bumper in 3-Wire Port A\n#                    Bumper in 3-Wire Port B         \n#                                                                            \n# ----------------------------------------------------------------------------\n\n# Library imports\nfrom vex import *\n\nbumper_a.\n\n# Begin project code\nwhile True: \n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    \n    # The 'and' operator requires BOTH conditions to be \"True\" \n    # for the conditional statement to evaluate as \"True\"\n    if bumper_a.pressing() and bumper_b.pressing():\n        brain.screen.print(\"AND Statement: True\")\n    else:\n        brain.screen.print(\"AND Statement: False\")\n    \n    # Move the cursor to the next line\n    brain.screen.next_row()\n\n    # The 'or' operator requires EITHER conditions to be \"True\" \n    # for the conditional statement to evaluate as \"True\"\n    if bumper_a.pressing() or bumper_b.pressing():\n        brain.screen.print(\"OR Statement: True\")\n    else:\n        brain.screen.print(\"OR Statement: False\")\n    \n    # Move the cursor to the next line\n    brain.screen.next_row()\n\n    # The 'not' operator will do the inverse (opposite) of \n    # the condition's value\n    if not bumper_a.pressing():\n        brain.screen.print(\"NOT Statement: True\")\n    else:\n        brain.screen.print(\"NOT Statement: False\")\n\n    # A brief delay to allow text to be printed without distortion or tearing\n    wait(30,MSEC)","textLanguage":"python","rconfig":[{"port":[1,10,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm"},"triportSourcePort":null},{"port":[1],"name":"bumper_a","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"bumper_b","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}