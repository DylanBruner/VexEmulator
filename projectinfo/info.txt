Overall
 - thoughts/notes
  - Possibly make the repo public and allow people to contribute, would speed up the development substantially
    but i'm not sure if the intrest for a python-only emulator is there

Brain
 - Current Devices that can be emulated
   - Bumper
   - Controller
   - Distance Sensor
   - Drivetrain
   - Gyroscope
   - Electro Magnet
   - Motor
   - Optical Sensor (not tested)
   - Rotation Sensor
   - Inertial Sensor
   - Motor Group

 - What happens when a program is executed/selected/clicked
  1. The program is loaded into a "CodeContainer"
    - A CodeContainer is a container for a program it has it's own functions, variables, globals, etc.
  2. All of the devices are loaded into the CodeContainers globals
                (Supported Devices that are in the .v5python config file)
  3. The CodeContainer is executed on it's own thread
     - It can fully access the brain's screen/timer/battery/etc.

 - Has a device info screen like the real brain but it doesn't do anything at the moment
   as the devices are not loaded until a program is executed.

 - It is possible to progomaticly check wether or not the code is running on Physical or Emulated brain by checking if
   any of the devices have the attribute ._attributes for example 
   hasattr(brain, "_attributes")

 - 18 diffrent programs can be ran from the brain, 3 from the home screen and 15 from the user programs screen
 - The User Programs Folder works as mentioned above
 - Loads programs as .v5python
 - Uses a "virtual" SD Card that the programs can write to as normal
  - /data/emulatedstorage/SDCard
 - All programs are stored in data/emulatedstorage/Internal/Programs
 - Home button allows exiting a program and returning to the home screen where another program can be ran
 - Emulates/Redirects functions like Thread, wait to their respective external libraries

 - Planned Todos
  - Clean up code!!
  [DONE] - If the code fails show a popup asking if the user wants to retry in legacy mode
  - Legacy mode
    - Add support for functions VEX changed or removed
  - Drivetrain w Inertial support!
  - Make all devices able to be emulated
  - Maybe use physical controller on the emulated brain not sure about the practicality of this
  - Register the brain's battery as a emulated device that way the web UI can control it's attributes
  [DONE] - Add support for the competition function
  - Maybe fix the emulator dragging (stop it from snapping)
  - A CLI interface to start the emulator at a certain point or to start a program without interaction
  - Ability to take screenshots of the emulator easily
  - Try to dump assets from the offical brain that way it will look 1000x better
  - Show which ports are ocupied when a program is running
  - Maybe a ability to limit the Clock Speed of the emulator along with the max amount of memory it can use
  - Maybe make all the devices work together, like if the drivetrain is told to move, update the location were supposed to be at and
    tell all the other devices to update their attributes

  - Interesting Possible Features
   - Try to inject code into VEX Code that will launch the emulator when the run button is clicked without a brain connected
     - Or possibly use a virtual serial device and pretend to be a real brain (not sure how hard this would be to do)
  

Webserver
 - Allows all devices and their attributes to be modified through the browser
 - Current supported attribute types
  - Boolean
  - String
  - Integer
  - Float
  - Callbacks

 - Planned Features
  - Make the UI look a lot nicer (pictures!!)
    - Nicer Input themeing
  - Use sliders when possible
  - Make device attributes collapseable
  - Group / order devices by type
    - Controller is at top when loaded
  - Check the brain for variable changes and update them on the site without reloading
  - Add support for the competition function
  - Possibly a mobile mode in which it only displays the controller and you can use it like a normal controller

Files and what they do
 - emulator.py
  - the main file, the initial startup after that most is controlled internaly
 
 - codecontainer.py
  - Handles createing semi-isolated code enviorments to run VEX programs in

 - legacysupport.py
  - Not fully implemented yet but will be loaded before the VEX program when legacy mode is enabled

 - linker.py
  - Contains a little bit of code that is loaded before the VEX program
 
 - prettyemu.py
  - Makes any print statements output a little nicer

 - program.py
  - Holds all the code/config for a program, contains the methods to strip off the code auto generated by VEX

 - vexbrain.py
  - The most complicated part handles all the screen logic, and brings almost all the files together

 - vexfunctions.py
  - used for some functions that dont have drop-in replacements like the competition function

 - veximplementations.py
  - used for functions that have drop-in replacements like wait(1, SECONDS) -> time.sleep(1)

 - vexunits.py
  - contains all the unit definitions, MSEC, SECOND, INCHES, MM, etc.

 - virtualdeviceserver.py
  - Allows the modifying of device attributes when a program is running